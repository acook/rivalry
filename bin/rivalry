#!/usr/bin/env ruby

require 'find'
require 'pathname'
require 'pry'
require 'digest'

class Pathname
  alias_method :each, :each_child
  alias_method :exists?, :exist?
end

def usage
  puts "usage: #{$0} path/to/search/for/duplicates"
  exit 1
end

def out text = ''
  clear_line = "\e[2K"
  start_of_line = "\e[0G"
  print start_of_line, clear_line, text[0..(width - 1)]
end

def width
  tiocgwinsz = 0x40087468
  str = [0, 0, 0, 0].pack('SSSS')
  if $stdin.ioctl(tiocgwinsz, str) >= 0 then
    str.unpack('SSSS')[1]
  else
    80
  end
end

def scan pathname
  total_size  = 0
  total_count = 0
  all_files   = Array.new
  file_sizes  = Hash.new

  puts "Scanning all files..."
  pathname.find do |path|
    file = Pathname.new path

    if file.directory? then
      if skip?(file)
        out "-- SKIPPING: #{file}"
        Find.prune
      else
        out "-- DIRECTORY: #{file}"
        all_files << file
      end
    elsif valid? file then
      out "-- FILE: #{file}"

      size = file.size

      file_sizes[size] ||= Array.new
      file_sizes[size] << file

      all_files << file
      total_size += size
      total_count += 1
    end
  end

  out
  puts "-- Total Size  : #{humanize total_size}"
  puts "-- Total Count : #{total_count} files"

  similar_files = file_sizes.map{|size, file_list| file_list if file_list.length > 1 }.flatten.compact
  puts "-- Similar     : #{similar_files.length} files with the same size"

  puts
  puts "Determining duplicates..."

  similar_count = 0
  progress_count = 0
  file_hashes = Hash.new
  file_sizes.each do |size, files|
    if files.length < 2 then
      progress_count += files.length
      next
    end

    similar_count += files.length

    files.each do |file|
      progress_count += 1
      out "-- HASHING (#{progress_count}/#{total_count}): #{file}"

      hash = Digest::SHA256.file(file).to_s

      file_hashes[hash] ||= Array.new
      file_hashes[hash] << file
    end
  end

  duplicate_files = file_hashes.map{|hash, file_list| file_list if file_list.length > 1 }.flatten.compact

  out
  puts "-- Similar     : #{similar_files.length} files with the same size"
  puts "-- Dupes Count : #{duplicate_files.length} files"

  duplicate_files
end

def run path
  files = scan Pathname.new(path)
  files.each do |file|
    #puts file.to_s
  end
end

def skip? path
  basename = File.basename path
  ignores.find{|name, pattern| basename =~ pattern} && true
end

def invalid? file
  !(valid? file)
end

def valid? file
  file.exists?
end

def ignores
  {
    dir: /^\.$/,
    scm: /^(\.git|\.hg|\.svn|\.gitkeep)$/
  }
end

BYTE_UNITS =[[1073741824, "GB"], [1048576, "MB"], [1024, "KB"], [1, "B"], [-1, 'B']]

def humanize bytes
  unit = BYTE_UNITS.find{|u| bytes > u[0] }
  "#{bytes / unit[0]} #{unit[1]}"
end

path = ARGV.first || usage

run path
