#!/usr/bin/env ruby

require 'find'
require 'pathname'
require 'pry'
require 'digest'

class Pathname
  alias_method :each, :each_child
  alias_method :exists?, :exist?
end

def usage
  puts "usage: #{$0} path/to/search/for/duplicates"
  exit 1
end

def out text = ''
  return if $silent

  if $verbose then
    puts text
  else
    puts text[0..(width - 1)]
  end
end

def progress type, file, count = nil, total = nil
  return if $silent

  if count && total then
    tally = " (#{count}/#{total})"
  elsif count then
    tally = " (#{count})"
  else
    tally = ''
  end

  text = "-- #{type}#{tally}: #{file}"

  if $verbose then
    puts text
  else
    clear_line
    print text[0..(width - 1)]
  end
end

def clear_line
  return if $silent

  clear_line = "\e[2K"
  start_of_line = "\e[0G"
  print start_of_line, clear_line
end

def width
  tiocgwinsz = 0x40087468
  str = [0, 0, 0, 0].pack('SSSS')
  if $stdin.ioctl(tiocgwinsz, str) >= 0 then
    str.unpack('SSSS')[1]
  else
    80
  end
end

def scan pathname

  out "Scanning all files..."

  total_size  = 0
  total_count = 0
  all_files   = Array.new
  file_sizes  = Hash.new { |hash, k| hash[k] = [] }

  pathname.find do |path|
    file = Pathname.new path

    if file.directory? then
      if skip? file then
        progress 'SKIP DIR', file
        Find.prune
      else
        progress 'DIRECTORY', file
        all_files << file
      end
    elsif valid? file then
      if want? file then
        progress 'FILE', file

        size = file.size

        file_sizes[size] << file

        all_files << file
        total_size += size
        total_count += 1
      else
        progress 'SKIP FILE', file
      end
    end
  end

  clear_line
  out "-- Total Size  : #{humanize total_size}"
  out "-- Total Count : #{total_count} files"

  similar_files = file_sizes.map{|size, file_list| file_list if file_list.length > 1 }.flatten.compact
  total_similar = similar_files.length

  out "-- Similar     : #{total_similar} files with the same size"

  out
  out "Determining duplicates..."

  similar_count = 0
  file_hashes = Hash.new { |hash, k| hash[k] = [] }

  similar_files.each do |file|
    similar_count += 1

    progress 'HASHING', file, similar_count, total_similar

    hash = Digest::SHA256.file(file).to_s

    file_hashes[hash] << file
  end

  duplicate_files = file_hashes.map{|hash, file_list| file_list if file_list.length > 1 }.flatten.compact

  out
  out "-- Dupes Count : #{duplicate_files.length} files"
  out

  duplicate_files
end

def run path
  files = scan Pathname.new(path)
  files.each do |file|
    #puts file.to_s
  end
end

def want? path
  extension = File.extname path
  wants.find{|name, pattern| extension =~ pattern} && true
end

def skip? path
  basename = File.basename path
  ignores.find{|name, pattern| basename =~ pattern} && true
end

def invalid? file
  !(valid? file)
end

def valid? file
  file.exists?
end

def ignores
  {
    dir: /^\.$/,
    scm: /^\.(git|hg|svn|gitkeep)$/
  }
end

def wants
  {
    audio:  /^\.(mp3|ogg|flac|wav|aiff|mid)$/i,
    images: /^\.(png|jpg|gif|bmp|tga|jpeg|tif|tiff)/i
  }
end

BYTE_UNITS =[[1073741824, "GB"], [1048576, "MB"], [1024, "KB"], [1, "B"], [-1, 'B']]

def humanize bytes
  unit = BYTE_UNITS.find{|u| bytes > u[0] }
  "#{bytes / unit[0]} #{unit[1]}"
end

path = ARGV.first || usage

run File.expand_path path
